Thread(쓰레드) - 여러개의 코드들을 실행시킬수 있도록 만드는 것... - 함수를 이용하여 사용한다....Thread 생성 함수uintptr_t _beginthreadex(     void*                    _Security,    unsigned                 _StackSize,    _beginthreadex_proc_type _StartAddress,    void*                    _ArgList,    unsigned                 _InitFlag,    unsigned*                _ThrdAddr);void* _Security  - 핸들 상속과 보안 디스크립터에 대한 정보를 전달할때 사용하는 매개변수...  - NULLunsigned _StackSize, - 프로세스 안에서 Thread가 사용할 stack공간의 크기 - 기본 1MB_beginthreadex_proc_type _StartAddress - Thread로 실행할 함수의 주소 - Thread 실행 함수 정의 형식  unsigned __stdcall 함수명(void * arg) { 함수 정의 }void* _ArgList - Thread로 실행할 함수에 전달할 인자의 주소 - NULLunsigned _InitFlag - Thread가 만들어지고 나서 언제 시작할지 결정하는 설정...DELEY - 0unsigned* _ThrdAddr - Thread ID가 저장할 변수의 주소 - NULLHANDLE CreateThread(    LPSECURITY_ATTRIBUTES lpThreadAttributes,    SIZE_T dwStackSize,    LPTHREAD_START_ROUTINE lpStartAddress,    LPVOID lpParameter,    DWORD dwCreationFlags,    LPDWORD lpThreadId);LPSECURITY_ATTRIBUTES lpThreadAttributes - 핸들 상속과 보안 디스크립터에 대한 정보를 전달할때 사용하는 매개변수... - 프로세스 안에서 Thread가 사용할 Stack공간의 크기 - 기본 1MB - LPTHREAD_START_ROUTINE lpStartAddress  - Thread로 실행할 함수의 주소  - Thread 실행 함수 정의 형식    DWARD WINAPI 함수명(LPVOID lpParameter) { 코드 정의  } - LPVOID lpParameter  - Thread로 실행할 함수에 전달할 인자의 주소 - NULL - DWORD dwCreationFlags  - Thread가 만들어지고 나서 언제 시작할지 결정하는 매개변수 - 0 - LPDWORD lpThreadId  - Thread ID===================================================================================Thread 관리 함수... - Thread가 종료 되기를 기다리는 함수...  DWORD WaitForSingleObject( HANDLE hHandle, DWORD dwMilliseconds );   - HANDLE hHandle - 끝나기를 기다리는 Thread의 핸들....   - DWORD dwMilliseconds - 시간설정... - Thread들이 종료 되기를 기다리는 함수  DWORD WaitForMultipleObjects( DWORD nCount, CONST HANDLE* lpHandles, BOOL bWaitAll, DWORD dwMilliseconds );  - DWORD nCount - Thread의 개수  - CONST HANDLE* lpHandles - 끝나기를 기다릴 Thread들의 핸들값을 저장하는 배열...  - BOOL bWaitAll - TRUE/FALSE  - DWORD dwMilliseconds - 시간 설정 - Thread 일시 중지 함수  DWORD SuspendThread( HANDLE hThread );   - HANDLE hThread - 일시 중지할 Thread 핸들... - Thread 재시작 함수  DWORD ResumeThread( HANDLE hThread );   - HANDLE hThread - 일시 중지중인 Thread 핸들====================================================================================================================Thread 동기화 - 두개 이상의 Thread가 공유 자원 접근 시 문제가 발생되기도 한다... - 공유자원에 대해 오직 한 Thread만 접근 할수 있도록 허용한다... - 한 Thread가 작업을 완료 하면 기다리는 Thread에게 알려준다...임계영역(Critical Section) - 공유자원에 대해 오직 한 Thread만 접근 할수 있도록 허용 - 코드중에 Thread의 문제 소지 코드를 임계영역으로 설정하여 이 구간을 하나의 Thread만 실행할수 있도록 설정한다... - 임계영역 구성시에는 4개의 함수로 구성된다... - 임계영역 생성 함수  VOID InitializeCriticalSection( LPCRITICAL_SECTION lpCriticalSection );   - LPCRITICAL_SECTION lpCriticalSection - CriticalSection 구조체 전역변수 주소값 - 자원 공유 시작 함수  VOID EnterCriticalSection( LPCRITICAL_SECTION lpCriticalSection ); - 자원 공유 끝 함수  VOID LeaveCriticalSection( LPCRITICAL_SECTION lpCriticalSection ); - 임계영역 종료  VOID DeleteCriticalSection( LPCRITICAL_SECTION lpCriticalSection );